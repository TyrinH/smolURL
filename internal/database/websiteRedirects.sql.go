// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: websiteRedirects.sql

package database

import (
	"context"
)

const createWebsiteRedirect = `-- name: CreateWebsiteRedirect :one
INSERT INTO websiteRedirects (
  originalUrl, redirectUrl
) VALUES (
  ?, ?
)
RETURNING id, originalurl, redirecturl, created_at, updated_at
`

type CreateWebsiteRedirectParams struct {
	Originalurl string
	Redirecturl string
}

func (q *Queries) CreateWebsiteRedirect(ctx context.Context, arg CreateWebsiteRedirectParams) (WebsiteRedirect, error) {
	row := q.db.QueryRowContext(ctx, createWebsiteRedirect, arg.Originalurl, arg.Redirecturl)
	var i WebsiteRedirect
	err := row.Scan(
		&i.ID,
		&i.Originalurl,
		&i.Redirecturl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWebsiteRedirect = `-- name: GetWebsiteRedirect :one
SELECT id, originalurl, redirecturl, created_at, updated_at FROM websiteRedirects
WHERE id = ? LIMIT 1
`

func (q *Queries) GetWebsiteRedirect(ctx context.Context, id int64) (WebsiteRedirect, error) {
	row := q.db.QueryRowContext(ctx, getWebsiteRedirect, id)
	var i WebsiteRedirect
	err := row.Scan(
		&i.ID,
		&i.Originalurl,
		&i.Redirecturl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listWebsiteRedirects = `-- name: ListWebsiteRedirects :many
SELECT id, originalurl, redirecturl, created_at, updated_at FROM websiteRedirects
ORDER BY originalUrl
`

func (q *Queries) ListWebsiteRedirects(ctx context.Context) ([]WebsiteRedirect, error) {
	rows, err := q.db.QueryContext(ctx, listWebsiteRedirects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WebsiteRedirect
	for rows.Next() {
		var i WebsiteRedirect
		if err := rows.Scan(
			&i.ID,
			&i.Originalurl,
			&i.Redirecturl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
